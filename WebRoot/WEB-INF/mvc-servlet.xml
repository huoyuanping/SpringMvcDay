<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
	">
	<!-- 扫描 -->
	<context:component-scan base-package="com.et.lesson06"></context:component-scan>
	<context:property-placeholder location="classpath:/jdbc.properties" />
	
	<!-- 验证本身不支持国际化自定义验证 从新指定验证bean validator="localValidatorFactoryBean"-->
	<bean id="localValidatorFactoryBean" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="validationMessageSource" ref="messageSource" ></property>
	</bean>
	
	<!-- 静态资源映射 -->
	<mvc:resources mapping="/img/**" location="/WEB-INF/images/"/>
	
	<!-- springmvc配置拦截/ 所有的资源都被拦截（图片无法展示）将除控制台以外的资源交会给servlet处理 -->
	<mvc:default-servlet-handler />
	
	<!-- 将springmvc注解的action交给springmvc处理 -->
	<mvc:annotation-driven  validator="localValidatorFactoryBean">
		
		<mvc:message-converters>
			<!-- 配置返回字节数组解析成json的消息转换器 -->
			<bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
					<!-- 设置响应支持的类型 -->
						<value>text/html;charset="UTF-8"</value>
						<!-- 设置请求body支持的类型 -->
						<value>application/x-www-form-urlencoded</value>
					</list>
				</property>
			</bean>
			<!-- 配置返回对象解析成json的消息转换器 -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
					<!-- 设置响应支持的类型 -->
						<value>text/html;charset="UTF-8"</value>
						<!-- 设置请求body支持的类型 -->
						<value>application/x-www-form-urlencoded</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- 该拦截器用于url上的参数 国际化 
		只是当jsp经过action之后才会将当前的国际和语言存储在session中 同时从session中获取
	-->
	<mvc:interceptors>
		<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="a"></property>
		</bean>
		<!-- 自定义拦截器 -->
		<mvc:interceptor>
			<!-- 要拦截的action  path="/**"拦截所有的 -->
			<mvc:mapping path="/inter"/>
			<bean class="com.et.lesson05.MyInteractor"></bean>
		</mvc:interceptor>
		
		<!-- 重复提交的拦截器配置-->
		<mvc:interceptor>
			<!-- 要拦截的action  path="/**"拦截所有的 -->
			<mvc:mapping path="/tm"/>
			<bean class="com.et.lesson05.TokenInteractor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	

	<!-- 国际化时   参数需被临时存储的地方 当用户再次访问时应该使用之前的参数 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>	
	
	<!-- 启动文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 限制文件上传大小 -->
		<property name="maxUploadSize" value="5242880"></property>
	</bean>


	<!-- 视图解析器的配置 -->
	<!--
		<bean id="resourceViewResolver"class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/"></property> 
			<property name="suffix"value=".jsp"></property> 
		</bean>
	-->

	<!-- 数据源只是为了获取连接 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">

		<property name="url" value="jdbc:mysql://localhost:3306/food"></property>
		<property name="username" value="root"></property>
		<property name="password" value="123456"></property>
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
	</bean>
	<!-- 事务管理器 不再使用jdbc的commit和roolback 必须使用事务管理器提供 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 定义通知 通知的代码spring已经实现  关联上面的事务管理器-->
	<tx:advice id="myAdvisor" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="save*" />
			<tx:method name="delete*" />
			<!-- 除了以上三种方法以外的所有 -->
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 定义切点 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.*..*.service.*.*(..))"
			id="myPopint" />
		<aop:advisor advice-ref="myAdvisor" pointcut-ref="myPopint" />
	</aop:config>
	<!-- 封装一些操作的方法 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
</beans>